#include <iostream>
#include <bitset> // bit를 옆으로 옮긴다???!!!

using namespace std;

int main()
{
	/*
	0, 1 비트
	10진수		2진수		16진수
	0			0			0
	1			1			1
	2			10			2
	3			11			3
	4			100			4
	5			101			5
	6			110			6
	7			111			7
	8			1000		8
	9			1001		9
	10			1010		a
	11			1011		b
	12			1100		c
	13			1101		d
	14			1110		e
	15			1111		f
	16			10000		10
	17			10001		11
	18			10010		12
	19			10011		13
	20			10100		14
	
	// 30 = 2진수( 11110 = 16 + 8 + 4 + 2) , 16진수(1e)
	// 74 = 2진수( 1001010 = 64 + 8 + 2), 16진수(3a)
	32(2^5), 64(2^6)

	// 10001 = 2^4 + 1 = 16 +1 = 17 (16진수 11)
	// 101110 = 2^5 + 2^3 + 2^2 + 2^1 = 32 + 8 + 4 + 2 = 46 (16진수 32 + 14 = 2e) 
	
	// 3.375 2진수( 11.011) 
	// 0.5^ 0 + 0.25 * 1 + 0.125 * 1 = 011

	// 16진수는 0~9까지하고 10은 a 부터해서 15 == f 까지 있다. 16은 다시 앞자리를 바꿔서 10 으로 시작한다.
	// 1f 는 31이라는 뜻 // 20 은 32 //  16진수로 표현된 nm이 있다면 nm의 값은 (16 * n + m) 이다.
	// 2진수를 16진수로 바꿀때는 4자리씩 띄워서 생각한다.
	
	// 1110 0111 = 14 , 7 = e 7

	// 소수점 2진수 표현방법
	// 정수는 원래대로 표현, 소수 뒷자리에 2를 계속 곱해준다(정수부는 버림)
	0.375 * 2 = 0.75
	0.75 * 2 = 1.5
	0.5 * 2 = 1.0
	==> 001


	*/

	int x = 0xA2; // 16진수는 0x 로시작한다.
	int y = 0xE7;

	// int a = 0b1110; // 2진수는 0b 로 시작한다.
	//int b = 0b1001010; 
	int c = 0b11100111;

	cout << x << endl;
	cout << y << endl;
	// cout << a << endl;
	//cout << b << endl;
	
	/*
	======컴퓨터 음수표현=====

	1바이트 char 0000 0000 , 256 ,  -128 ~ 127
	
	2의 보수
	
	0000 0101 = 5
	1111 1011 = -5 (+1을 해줌)
	
	1) 0100 1111, 2) 0011 0011 십진수로 
	1) 2^6 = 64 + 15 = 79 
	2) 2^5 + 2^4 + 3 = 32 + 16 +3 = 51 

	3) 1010 1001, 4) 1111 0000 음수. 십진수로
	3) 0101 0111 = 2^6 + 2^4 + 2^2 + 3 = 64 + 16 + 4 +3 = 64 + 23 = -87
	4) 0001 0000 = 2^4 = -16

	0000 0001 = 1
	1111 1111 = -1
	
	*/

	/*
	====== &, |, ^ , ~ =====
	// & and 연산
	0 0 = 0
	0 1 = 0
	1 0 = 0
	1 1 = 1

	// | or 연산
	0 0 = 0
	0 1 = 1
	1 0 = 1
	1 1 = 1

	// ^ xor연산
	0 0 = 0
	0 1 = 1
	1 0 = 0
	1 1 = 0

	// ~ not연산
	~ 0 = 1
	~ 1 = 0

	*/

	int num1 = 15; // 0000 1111
	int num2 = 20; // 0001 0100
	int num3 = num1 & num2; // 0000 0100
	int num4 = num1 | num2; // 0001 1111
	int num5 = num1 ^ num2; // 0001 1011
	int num6 = ~num1; // 1111 0001 ( num의 음수 +1 값이나온다 == 2의보수)
	int num7 = ~num2; // 1110 1110

	cout << "============" << endl;
	cout << num3 << endl;
	cout << num4 << endl;
	cout << num5<< endl;
	cout << num6 << endl;
	cout << num7 << endl;

	cout << "============" << endl;
	cout << 0b00001111 << endl;
	cout << 0b00010100 << endl;
	cout << 0b00000100 << endl;
	cout << 0b00011111 << endl;
	cout << 0b00011011 << endl;

	cout << 0b11110001 << endl;	
	cout << 0b11101110 << endl;

	cout << "============" << endl;


	unsigned int a = 2; // 0010 
	cout << bitset<4>(a) << endl;

	unsigned int b = a << 1; // 1을 한칸 왼쪽으로 0100
	cout << bitset<4>(b) << endl;

	cout << bitset<8>(a << 1) << " " << (a << 1) << endl;
	cout << bitset<8>(a << 2) << " " << (a << 2) << endl;
	cout << bitset<8>(a << 3) << " " << (a << 3) << endl;
	cout << bitset<8>(a << 4) << " " << (a << 4) << endl;

	cout << bitset<8>(a) << " " << a << endl;
	cout << bitset<8>(~a) << " " << ~a << endl;

}
